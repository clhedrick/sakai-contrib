============================
* Change Gradebook Version *
============================

To change the gradebook version in all the pom.xml files, use the following command:

find . -name pom.xml | xargs sed -i -e 's/<old version>/<new version>/g'

e.g.
find . -name pom.xml | xargs sed -i -e 's/1.4.0-SNAPSHOT/1.4.0/g'

Set the property gb2.ui.version during a build to specify a version string that the build will display in the UI. If the property is not set, the value will default to 'trunk'.
The file VERSION.txt in the rool of the src tree is copied and filtered to the location server/src/java/org/sakaiproject/gradebook/gwt/server/VERSION.txt



=====================================================
* Testing Site-to-Site copy in GWT Development Mode *
=====================================================


In the 'dev'module is a JAXRS REST resource defined for testing Sakai archiving operations:

org.sakaiproject.gradebook.gwt.sakai.rest.resource.EntityArchiveTester

The EntityproducerTransferrer is in the 'server' module:

org.sakaiproject.gradebook.entity.Gradebook2EntityProducerTransferAgent



The above REST Resource defines three paths:

/archive/{siteId}

The method that handles this path calls archiveService.archive(siteId) directly.



/archive/transfer/{from}/{to}

The method that handles this path acts as an agent for the archive service and gets all EntityTransferrer marked classes from EntityManager and calls Gradebook2EntityProducerTransferAgent.transferCopyEntities({from}, {to}, null, true) on each one.
Note that the signature of the method differs from merge below.  Also, the sites id's are interpreted as gradebook UID's and the gradebooks service is called to validate that each exists.


/archive/merge/{from}/{to}

The method that handles this patch works almost the same way that the above (transfer) path hander acts: using EntityManager to call the marked classes directly. The diffrence is in the method signature. Here the handler calls Gradebook2EntityProducerTransferAgent.transferCopyEntities({from}, {to}, null) .... which does not do a 'cleanup'
And just like the last handler, this one also interprets the site id's a as gradebook UID's and the gradebooks service is called to validate that each exists.


In the Browser....


... to trigger one of the above REST commands, grab the url you are using for dev mode: launch a Run or Debug configuration that is properly configured to run GB2 and copy the URL presented in the Development...typically it is something like 

http://127.0.0.1:59704/GradebookApplication.html?gwt.codesvr=127.0.0.1:9997

Modify the url to do an EntityTransferrer operation. Here is a site-to-site transfer template:


http://127.0.0.1:{port}/gradebook/rest/archive/transfer/{from}/{to}

EXAMPLE:

http://127.0.0.1:59704/gradebook/rest/archive/transfer/ANOTHER_SITE_CONTEXT/TESTSITECONTEXT
(except for the port number, this example will be just what you need in gwt dev mode)

The port changes each time the 'Run/Debug Configuration' is run, so make sure you grab it from Eclipse. Also, the gwt.codesrv param is not needed unless you want to step through gwt client code and, since there is no client code here, client code is not applicable in this testing.

A little more background:

There are two sites created in dev mode: 
 - The main site is the one associated with the gradeboook you see in the UI... it's ID (siteId/ContextId/gradebookUID) can be found in AppConstants.TEST_SITE_CONTEXT_ID
 - The other site is not visible in the UI and is setup primarity for testing EntityTransferrer operations. It's ID can be found in ArchiveServiceMock.ANOTHER_SITE_CONTEXT

Make sure you get the order correct so that you can see the results in the UI.

After you navigate to an Archive REST url like above, you can reload the main gradebook2 url

http://127.0.0.1:59704/GradebookApplication.html?gwt.codesvr=127.0.0.1:9997 (again, you don't really need that parameter here either)

...to see any results (of copy and merge operations).








